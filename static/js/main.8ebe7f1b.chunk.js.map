{"version":3,"sources":["scoreTemplate.tsx","addScore.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScoreTemplate","props","result","resultat","className","player","name","src","alt","score","AddScore","isVisible","closeModal","React","useState","isClickable","useForm","register","handleSubmit","useAxios","data","execute","loading","error","onSubmit","values","partyResult","winingScore","parseInt","winnerScore","losingScore","loserScore","winingTeam","winner1","winner2","losingTeam","loser1","loser2","console","log","url","method","ref","placeholder","type","value","App","setIsVisible","onClick","resultDays","results","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAGaA,EAA+D,SAACC,GAEzE,IAAMC,EAASD,EAAME,SACrB,OAAQ,yBAAKC,UAAU,kBACnB,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YAAYF,EAAOG,OAAOC,MACzC,yBAAKC,IAAI,SAASC,IAAI,GAAGJ,UAAU,SACnC,yBAAKA,UAAU,SAASF,EAAOO,OAC/B,yBAAKL,UAAU,W,QCCVM,EAAoF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAAiB,EAEtFC,IAAMC,UAAS,GAFuE,mBAErHC,EAFqH,aAYzFC,eAA3BC,EAZoH,EAYpHA,SAAUC,EAZ0G,EAY1GA,aAZ0G,EAahFC,YAAsB,IAb0D,0BAanHC,EAbmH,EAanHA,KAAwBC,GAb2F,EAa7GC,QAb6G,EAapGC,MAboG,MA+B5H,OACI,yBAAKnB,UAAWO,EAAY,wBAA0B,2DAClD,yBAAKP,UAAU,oBACX,0BAAMoB,SAAUN,GApBX,SAACO,GACd,IAAMC,EAA2B,CAC7BC,YAAaC,SAASH,EAAOI,aAC7BC,YAAaF,SAASH,EAAOM,YAC7BC,WAAY,CAACP,EAAOQ,QAASR,EAAOS,SACpCC,WAAY,CAACV,EAAOW,OAAQX,EAAOY,SAEvCC,QAAQC,IAAId,GACZJ,EAAQ,CACJD,KAAMM,EACNc,IAAK,kCACLC,OAAQ,SAEZH,QAAQC,IAAInB,GACZR,QAOY,yBAAKR,UAAU,aAAf,oBACA,6BACI,yBAAKA,UAAU,sBACX,yCACA,2BAAOsC,IAAKzB,EAAUX,KAAK,UAAUqC,YAAY,mBAAmBC,KAAK,SACzE,2BAAOF,IAAKzB,EAAUX,KAAK,UAAUqC,YAAY,mBAAmBC,KAAK,SACzE,2BAAOF,IAAKzB,EAAUX,KAAK,cAAcqC,YAAY,QAAQE,MAAM,KAAKD,KAAK,YAEjF,yBAAKxC,UAAU,sBACX,yCACA,2BAAOsC,IAAKzB,EAAUX,KAAK,SAASqC,YAAY,mBAAmBC,KAAK,SACxE,2BAAOF,IAAKzB,EAAUX,KAAK,SAASqC,YAAY,mBAAmBC,KAAK,SACxE,2BAAOF,IAAKzB,EAAUX,KAAK,aAAaqC,YAAY,QAAQC,KAAK,aAGzE,yBAAKxC,UAAU,mBACX,2BAAOwC,KAAK,SAASC,MAAM,UAAUzC,UAAWW,EAAc,GAAK,qBCd5E+B,EA9BO,WAAO,IAAD,EAEQjC,IAAMC,UAAS,GAFvB,mBAEnBH,EAFmB,KAERoC,EAFQ,OAGS5B,YACjC,mCAJwB,sBAGjBC,EAHiB,EAGjBA,KAAME,EAHW,EAGXA,QAASC,EAHE,EAGFA,MAGxB,GAAID,EAAS,OAAO,yCACpB,GAAIC,EAAO,OAAO,qCAMlB,OAEE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,eAAc,yBAAKA,UAAU,OAAOI,IAAI,GAAGD,IAAI,aAAiB,yBAAKyC,QANnE,WAAQD,GAAa,IAMqE3C,UAAU,MAAMG,IAAI,WAAWC,IAAI,MAC9I,4BAAQJ,UAAU,cAEfgB,EAAK6B,WAAW,GAAGC,QAAQC,KAAI,SAACjD,GAC/B,OAAO,kBAAC,EAAD,CAAekD,IAAKlD,EAAOG,OAAOC,KAAMH,SAAUD,OAI3D,kBAAC,EAAD,CAAUS,UAAWA,EAAWC,WAbnB,WAAQmC,GAAa,SClBtBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ebe7f1b.chunk.js","sourcesContent":["import React from 'react';\nimport { Result } from './App';\n\nexport const ScoreTemplate: React.FunctionComponent<{ resultat: Result }> = (props) => {\n\n    const result = props.resultat;\n    return (<div className=\"contener-table\">\n        <div className=\"avatar\"></div>\n        <div className=\"username\">{result.player.name}</div>\n        <img src=\"up.svg\" alt=\"\" className=\"evol\" />\n        <div className=\"score\">{result.score}</div>\n        <div className=\"dash\"></div>\n    </div>\n        // <img src=\"down.svg\" alt=\"\" className=\"evol\" />\n        // <img src=\"up.svg\" alt=\"\" className=\"evol\" />\n        // <img src=\"standby.svg\" alt=\"\" className=\"evol\" />\n\n    );\n}","import React from 'react';\nimport Trend from 'react-trend';\nimport useForm from 'react-hook-form';\nimport useAxios from 'axios-hooks';\n\ninterface PartyResult {\n    winingTeam: Array<string>\n    losingTeam: Array<string>\n    winingScore: number\n    losingScore: number\n}\n\nexport const AddScore: React.FunctionComponent<{ isVisible: boolean; closeModal: () => void }> = ({ isVisible, closeModal }) => {\n\n    const [isClickable, setIsClickable] = React.useState(false);\n\n    // React.useEffect(() => {\n    //     if () {\n    //         setIsClickable(true)\n    //     } else {\n    //         setIsClickable(false)\n    //     }\n    // }, []);\n\n    const { register, handleSubmit } = useForm();\n    const [{ data, loading, error }, execute] = useAxios<PartyResult>({})\n    const onSubmit = (values: any) => {\n        const partyResult: PartyResult = {\n            winingScore: parseInt(values.winnerScore),\n            losingScore: parseInt(values.loserScore),\n            winingTeam: [values.winner1, values.winner2],\n            losingTeam: [values.loser1, values.loser2]\n        };\n        console.log(values);\n        execute({\n            data: partyResult,\n            url: 'https://baby-peco.herokuapp.com',\n            method: 'post'\n        });\n        console.log(data);\n        closeModal();\n    }\n\n    return (\n        <div className={isVisible ? \"contener-splashscreen\" : \"contener-splashscreen contener-splashscreen-undisplayed\"}>\n            <div className=\"addscore-wrapper\">\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <div className=\"title-add\">Ajouter un score</div>\n                    <div>\n                        <div className=\"contener-add-score\">\n                            <div>Gagnants</div>\n                            <input ref={register} name=\"winner1\" placeholder=\"Nom du gagnant 1\" type=\"text\" />\n                            <input ref={register} name=\"winner2\" placeholder=\"Nom du gagnant 2\" type=\"text\" />\n                            <input ref={register} name=\"winnerScore\" placeholder=\"Score\" value=\"10\" type=\"number\" />\n                        </div>\n                        <div className=\"contener-add-score\">\n                            <div>Perdants</div>\n                            <input ref={register} name=\"loser1\" placeholder=\"Nom du perdant 1\" type=\"text\" />\n                            <input ref={register} name=\"loser2\" placeholder=\"Nom du perdant 2\" type=\"text\" />\n                            <input ref={register} name=\"loserScore\" placeholder=\"Score\" type=\"number\" />\n                        </div>\n                    </div>\n                    <div className=\"contener-button\">\n                        <input type=\"submit\" value=\"Ajouter\" className={isClickable ? \"\" : \"unclickable\"} />\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport useAxios from 'axios-hooks';\nimport { Splashscreen } from './splashscreen';\nimport { ScoreTemplate } from './scoreTemplate';\nimport { AddScore } from './addScore';\n\ninterface Player {\n  name: string\n}\n\nexport interface Result {\n  player: Player; score: number\n}\n\ninterface T {\n  resultDays: Array<{ date: string; results: Array<Result> }>\n}\n\nconst App: React.FC = () => {\n\n  const [isVisible, setIsVisible] = React.useState(false);\n  const [{ data, loading, error }] = useAxios<T>(\n    'https://baby-peco.herokuapp.com'\n  )\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error!</p>\n\n\n  const displayModal = () => { setIsVisible(true) }\n  const closeModal = () => { setIsVisible(false) }\n\n  return (\n\n    <div className=\"App\">\n      <div className=\"header-peco\"><img className=\"logo\" alt=\"\" src=\"logo.png\"></img><img onClick={displayModal} className=\"add\" src=\"plus.svg\" alt=\"\" /></div>\n      <header className=\"App-header\">\n        {/* <Splashscreen></Splashscreen> */}\n        {data.resultDays[0].results.map((result) => {\n          return <ScoreTemplate key={result.player.name} resultat={result} />\n        })}\n\n\n        <AddScore isVisible={isVisible} closeModal={closeModal} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}